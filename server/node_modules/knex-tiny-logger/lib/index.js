"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = knexTinyLogger;

var _chalk = _interopRequireDefault(require("chalk"));

var executionTime = _interopRequireWildcard(require("./utils/execution-time"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const COLORIZE = {
  primary: _chalk.default.magenta,
  error: _chalk.default.red,
  success: _chalk.default.cyan
  /**
   * Decorate `knex` instance with logger
   *
   * @param {Object} knex - knex instance
   * @param {Object} options
   * @param {Function} [options.logger=console.log]
   * @param {Boolean} [options.bindings=true]
   * @return {Object} knex - knex instance
   */

};

function knexTinyLogger(knex, options = {}) {
  const _options$logger = options.logger,
        logger = _options$logger === void 0 ? console.log : _options$logger,
        _options$bindings = options.bindings,
        withBindings = _options$bindings === void 0 ? true : _options$bindings;
  const queries = new Map();
  const print = makeQueryPrinter(knex, {
    logger,
    withBindings
  });
  return knex.on('query', handleQuery).on('query-error', handleQueryError).on('query-response', handleQueryResponse);

  function handleQuery({
    __knexQueryUid: queryId,
    sql,
    bindings
  }) {
    const startTime = executionTime.start();
    queries.set(queryId, {
      sql,
      bindings,
      startTime
    });
  }

  function handleQueryError(_error, {
    __knexQueryUid: queryId
  }) {
    withQuery(queryId, ({
      sql,
      bindings,
      duration
    }) => {
      print({
        sql,
        bindings,
        duration
      }, COLORIZE.error);
    });
  }

  function handleQueryResponse(_response, {
    __knexQueryUid: queryId
  }) {
    withQuery(queryId, ({
      sql,
      bindings,
      duration
    }) => {
      print({
        sql,
        bindings,
        duration
      }, COLORIZE.success);
    });
  }

  function withQuery(queryId, fn) {
    const query = queries.get(queryId);
    queries.delete(queryId);
    if (!query) throw new Error('Query disappeared');
    const sql = query.sql,
          bindings = query.bindings,
          startTime = query.startTime;
    const duration = executionTime.stop(startTime);
    fn({
      sql,
      bindings,
      duration
    });
  }
}

function makeQueryPrinter(knex, {
  logger,
  withBindings
}) {
  return function print({
    sql,
    bindings,
    duration
  }, colorize) {
    const sqlRequest = knex.client._formatQuery(sql, withBindings ? bindings : null);

    logger('%s %s', COLORIZE.primary(`SQL (${duration.toFixed(3)} ms)`), colorize(sqlRequest));
  };
}